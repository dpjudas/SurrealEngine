#pragma once

#include "UObject/UObject.h"

class NObject
{
public:
	static void RegisterFunctions();

	static void Abs(float A, float& ReturnValue);
	static void AddAdd_Byte(uint8_t& A, uint8_t& ReturnValue);
	static void AddAdd_Int(int& A, int& ReturnValue);
	static void AddAdd_PreByte(uint8_t& A, uint8_t& ReturnValue);
	static void AddAdd_PreInt(int& A, int& ReturnValue);
	static void AddEqual_ByteByte(uint8_t& A, uint8_t B, uint8_t& ReturnValue);
	static void AddEqual_FloatFloat(float& A, float B, float& ReturnValue);
	static void AddEqual_IntInt(int& A, int B, int& ReturnValue);
	static void AddEqual_RotatorRotator(Rotator& A, const Rotator& B, Rotator& ReturnValue);
	static void AddEqual_VectorVector(vec3& A, const vec3& B, vec3& ReturnValue);
	static void Add_FloatFloat(float A, float B, float& ReturnValue);
	static void Add_IntInt(int A, int B, int& ReturnValue);
	static void Add_RotatorRotator(const Rotator& A, const Rotator& B, Rotator& ReturnValue);
	static void Add_VectorVector(const vec3& A, const vec3& B, vec3& ReturnValue);
	static void AllFiles(const std::string& FileExtension, const std::string& FilePrefix, std::string& outFileName);
	static void AndAnd_BoolBool(bool A, BitfieldBool* B, BitfieldBool& ReturnValue);
	static void And_IntInt(int A, int B, int& ReturnValue);
	static void Asc(const std::string& S, int& ReturnValue);
	static void At_StrStr(const std::string& A, const std::string& B, std::string& ReturnValue);
	static void Atan(float A, float& ReturnValue);
	static void Caps(const std::string& S, std::string& ReturnValue);
	static void Chr(int i, std::string& ReturnValue);
	static void Clamp(int V, int A, int B, int& ReturnValue);
	static void ClassIsChildOf(UObject* TestClass, UObject* ParentClass, BitfieldBool& ReturnValue);
	static void ComplementEqual_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void ComplementEqual_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void Complement_PreInt(int A, int& ReturnValue);
	static void Concat_StrStr(const std::string& A, const std::string& B, std::string& ReturnValue);
	static void Cos(float A, float& ReturnValue);
	static void Cross_VectorVector(const vec3& A, const vec3& B, vec3& ReturnValue);
	static void Disable(UObject* Self, const NameString& ProbeFunc);
	static void DivideEqual_ByteByte(uint8_t& A, uint8_t B, uint8_t& ReturnValue);
	static void DivideEqual_FloatFloat(float& A, float B, float& ReturnValue);
	static void DivideEqual_IntFloat(int& A, float B, int& ReturnValue);
	static void DivideEqual_RotatorFloat(Rotator& A, float B, Rotator& ReturnValue);
	static void DivideEqual_VectorFloat(vec3& A, float B, vec3& ReturnValue);
	static void Divide_FloatFloat(float A, float B, float& ReturnValue);
	static void Divide_IntInt(int A, int B, int& ReturnValue);
	static void Divide_RotatorFloat(const Rotator& A, float B, Rotator& ReturnValue);
	static void Divide_VectorFloat(const vec3& A, float B, vec3& ReturnValue);
	static void Dot_VectorVector(const vec3& A, const vec3& B, float& ReturnValue);
	static void DynamicLoadObject(const std::string& ObjectName, UObject* ObjectClass, BitfieldBool* MayFail, UObject*& ReturnValue);
	static void Enable(UObject* Self, const NameString& ProbeFunc);
	static void EqualEqual_BoolBool(bool A, bool B, BitfieldBool& ReturnValue);
	static void EqualEqual_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void EqualEqual_IntInt(int A, int B, BitfieldBool& ReturnValue);
	static void EqualEqual_NameName(const NameString& A, const NameString& B, BitfieldBool& ReturnValue);
	static void EqualEqual_ObjectObject(UObject* A, UObject* B, BitfieldBool& ReturnValue);
	static void EqualEqual_RotatorRotator(const Rotator& A, const Rotator& B, BitfieldBool& ReturnValue);
	static void EqualEqual_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void EqualEqual_VectorVector(const vec3& A, const vec3& B, BitfieldBool& ReturnValue);
	static void Exp(float A, float& ReturnValue);
	static void FClamp(float V, float A, float B, float& ReturnValue);
	static void FMax(float A, float B, float& ReturnValue);
	static void FMin(float A, float B, float& ReturnValue);
	static void FRand(float& ReturnValue);
	static void GetAxes(const Rotator& A, vec3& X, vec3& Y, vec3& Z);
	static void GetEnum(UObject* E, int i, NameString& ReturnValue);
	static void GetPropertyText(UObject* Self, const std::string& PropName, std::string& ReturnValue);
	static void GetStateName(UObject* Self, NameString& ReturnValue);
	static void GetUnAxes(const Rotator& A, vec3& X, vec3& Y, vec3& Z);
	static void GotoState(UObject* Self, NameString* NewState, NameString* Label);
	static void GreaterEqual_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void GreaterEqual_IntInt(int A, int B, BitfieldBool& ReturnValue);
	static void GreaterEqual_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void GreaterGreaterGreater_IntInt(int A, int B, int& ReturnValue);
	static void GreaterGreater_IntInt(int A, int B, int& ReturnValue);
	static void GreaterGreater_VectorRotator(const vec3& A, const Rotator& B, vec3& ReturnValue);
	static void Greater_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void Greater_IntInt(int A, int B, BitfieldBool& ReturnValue);
	static void Greater_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void InStr(const std::string& S, const std::string& t, int& ReturnValue);
	static void Invert(vec3& X, vec3& Y, vec3& Z);
	static void IsA(UObject* Self, const NameString& ClassName, BitfieldBool& ReturnValue);
	static void IsInState(UObject* Self, const NameString& TestState, BitfieldBool& ReturnValue);
	static void Left(const std::string& S, int i, std::string& ReturnValue);
	static void Len(const std::string& S, int& ReturnValue);
	static void Lerp(float Alpha, float A, float B, float& ReturnValue);
	static void LessEqual_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void LessEqual_IntInt(int A, int B, BitfieldBool& ReturnValue);
	static void LessEqual_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void LessLess_IntInt(int A, int B, int& ReturnValue);
	static void LessLess_VectorRotator(const vec3& A, const Rotator& B, vec3& ReturnValue);
	static void Less_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void Less_IntInt(int A, int B, BitfieldBool& ReturnValue);
	static void Less_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void Localize(const std::string& SectionName, const std::string& KeyName, const std::string& PackageName, std::string& ReturnValue);
	static void Log(const std::string& S, NameString* Tag);
	static void Loge(float A, float& ReturnValue);
	static void Max(int A, int B, int& ReturnValue);
	static void Mid(const std::string& S, int i, int* j, std::string& ReturnValue);
	static void Min(int A, int B, int& ReturnValue);
	static void MirrorVectorByNormal(const vec3& Vect, const vec3& Normal, vec3& ReturnValue);
	static void MultiplyEqual_ByteByte(uint8_t& A, uint8_t B, uint8_t& ReturnValue);
	static void MultiplyEqual_FloatFloat(float& A, float B, float& ReturnValue);
	static void MultiplyEqual_IntFloat(int& A, float B, int& ReturnValue);
	static void MultiplyEqual_RotatorFloat(Rotator& A, float B, Rotator& ReturnValue);
	static void MultiplyEqual_VectorFloat(vec3& A, float B, vec3& ReturnValue);
	static void MultiplyEqual_VectorVector(vec3& A, const vec3& B, vec3& ReturnValue);
	static void MultiplyMultiply_FloatFloat(float A, float B, float& ReturnValue);
	static void Multiply_FloatFloat(float A, float B, float& ReturnValue);
	static void Multiply_FloatRotator(float A, const Rotator& B, Rotator& ReturnValue);
	static void Multiply_FloatVector(float A, const vec3& B, vec3& ReturnValue);
	static void Multiply_IntInt(int A, int B, int& ReturnValue);
	static void Multiply_RotatorFloat(const Rotator& A, float B, Rotator& ReturnValue);
	static void Multiply_VectorFloat(const vec3& A, float B, vec3& ReturnValue);
	static void Multiply_VectorVector(const vec3& A, const vec3& B, vec3& ReturnValue);
	static void Normal(const vec3& A, vec3& ReturnValue);
	static void Normalize(const Rotator& Rot, Rotator& ReturnValue);
	static void NotEqual_BoolBool(bool A, bool B, BitfieldBool& ReturnValue);
	static void NotEqual_FloatFloat(float A, float B, BitfieldBool& ReturnValue);
	static void NotEqual_IntInt(int A, int B, BitfieldBool& ReturnValue);
	static void NotEqual_NameName(const NameString& A, const NameString& B, BitfieldBool& ReturnValue);
	static void NotEqual_ObjectObject(UObject* A, UObject* B, BitfieldBool& ReturnValue);
	static void NotEqual_RotatorRotator(const Rotator& A, const Rotator& B, BitfieldBool& ReturnValue);
	static void NotEqual_StrStr(const std::string& A, const std::string& B, BitfieldBool& ReturnValue);
	static void NotEqual_VectorVector(const vec3& A, const vec3& B, BitfieldBool& ReturnValue);
	static void Not_PreBool(bool A, BitfieldBool& ReturnValue);
	static void OrOr_BoolBool(bool A, BitfieldBool* B, BitfieldBool& ReturnValue);
	static void Or_IntInt(int A, int B, int& ReturnValue);
	static void OrthoRotation(const vec3& X, const vec3& Y, const vec3& Z, Rotator& ReturnValue);
	static void Percent_FloatFloat(float A, float B, float& ReturnValue);
	static void Rand(int Max, int& ReturnValue);
	static void RandRange(UObject* Self, float Min, float Max, float& ReturnValue);
	static void ResetConfig();
	static void Right(const std::string& S, int i, std::string& ReturnValue);
	static void RotRand(BitfieldBool* bRoll, Rotator& ReturnValue);
	static void SaveConfig(UObject* Self);
	static void SetPropertyText(UObject* Self, const std::string& PropName, const std::string& PropValue);
	static void Sin(float A, float& ReturnValue);
	static void Smerp(float Alpha, float A, float B, float& ReturnValue);
	static void Sqrt(float A, float& ReturnValue);
	static void Square(float A, float& ReturnValue);
	static void StaticSaveConfig();
	static void SubtractEqual_ByteByte(uint8_t& A, uint8_t B, uint8_t& ReturnValue);
	static void SubtractEqual_FloatFloat(float& A, float B, float& ReturnValue);
	static void SubtractEqual_IntInt(int& A, int B, int& ReturnValue);
	static void SubtractEqual_RotatorRotator(Rotator& A, const Rotator& B, Rotator& ReturnValue);
	static void SubtractEqual_VectorVector(vec3& A, const vec3& B, vec3& ReturnValue);
	static void SubtractSubtract_Byte(uint8_t& A, uint8_t& ReturnValue);
	static void SubtractSubtract_Int(int& A, int& ReturnValue);
	static void SubtractSubtract_PreByte(uint8_t& A, uint8_t& ReturnValue);
	static void SubtractSubtract_PreInt(int& A, int& ReturnValue);
	static void Subtract_FloatFloat(float A, float B, float& ReturnValue);
	static void Subtract_IntInt(int A, int B, int& ReturnValue);
	static void Subtract_PreFloat(float A, float& ReturnValue);
	static void Subtract_PreInt(int A, int& ReturnValue);
	static void Subtract_PreVector(const vec3& A, vec3& ReturnValue);
	static void Subtract_RotatorRotator(const Rotator& A, const Rotator& B, Rotator& ReturnValue);
	static void Subtract_VectorVector(const vec3& A, const vec3& B, vec3& ReturnValue);
	static void Tan(float A, float& ReturnValue);
	static void VRand(vec3& ReturnValue);
	static void VSize(const vec3& A, float& ReturnValue);
	static void Warn(const std::string& S);
	static void XorXor_BoolBool(bool A, bool B, BitfieldBool& ReturnValue);
	static void Xor_IntInt(int A, int B, int& ReturnValue);
};
